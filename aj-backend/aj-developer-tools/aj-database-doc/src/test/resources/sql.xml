<?xml version="1.0" encoding="UTF-8"?>
<sqls>

    <sql id="processlist" comments="Display MySQL processlist">
        SELECT * FROM information_schema.processlist limit 5000
    </sql>
    <sql id="repl_mts" comments="Display MySQL Multithreading repl status">
        SELECT id, relay_log_name, relay_log_pos, master_log_name, master_log_pos, checkpoint_relay_log_name, checkpoint_relay_log_pos, checkpoint_master_log_name,
            checkpoint_master_log_pos, checkpoint_seqno, checkpoint_group_size,  hex(Checkpoint_group_bitmap) bitmap
            FROM mysql.slave_worker_info
    </sql>
    <sql id="active_processlist" comments="Display MySQL active processlist">
        SELECT * FROM information_schema.processlist where command!='Sleep' limit 5000
    </sql>
    <sql id="long_running_processlist" comments="Display MySQL processlist for queries running for more than specified time">
        SELECT * FROM information_schema.processlist where command!='Sleep' AND command!='Binlog Dump' AND command!='Connect' AND command!='Daemon'
            AND command!='Binlog Dump GTID' AND user!='system user' AND user!='event_scheduler' where time &gt;&amp;p_1

        <param name="time_sec"  dataType="numeric"/>
    </sql>
    <sql id="innodb_buffer_pool_status" expandRow="y" comments="Display MySQL inndodb buffer pool statistics">
        SELECT * FROM information_schema.innodb_buffer_pool_stats
    </sql>
    <sql id="show_databases" comments="Display MySQL Databases">
        show databases
    </sql>
    <sql id="meta_databases" comments="Display MySQL Databases">
        SELECT * FROM information_schema.schemata
    </sql>
    <sql id="meta_table_names" errorInline="y" comments="Display MySQL tables for a given schema">
        <!--  text>SELECT table_catalog,table_schema, table_name, table_type, engine, table_rows, data_length, index_length FROM information_schema.tables where table_schema='&amp;p_1' AND table_type!='VIEW'</text -->
        show tables FROM &amp;p_1
        <param name="database_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_view_names" errorInline="y" comments="Display MySQL views for a given schema">
        SELECT table_catalog,table_schema, table_name FROM information_schema.views where table_schema='&amp;p_1'
        <param name="database_name"  dataType="single_quoted_string"/>
    </sql>
    <sql id="meta_table_columns" errorInline="y" comments="Display MySQL table column info">
        SELECT * FROM information_schema.columns where table_schema='&amp;p_1' AND table_name='&amp;p_2'
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_table_meta" errorInline="y" comments="Display MySQL table meta info">
        <queryProcessor>TableMetaProcessor</queryProcessor>
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_table_indexes" errorInline="y" comments="Display MySQL table index info">
        show indexes FROM &amp;p_1.&amp;p_2
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_table_create" errorInline="y" comments="Display MySQL table create code">
        show create table &amp;p_1.&amp;p_2
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_view_create" errorInline="y" comments="Display MySQL view create code">
        show create view &amp;p_1.&amp;p_2
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="view_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_table_constraints" cerrorInline="y" omments="Display MySQL table constraints">
        SELECT * FROM information_schema.table_constraints where table_schema='&amp;p_1' AND table_name='&amp;p_2'
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_table_triggers" errorInline="y" comments="Display MySQL table triggers">
        SELECT trigger_catalog, trigger_schema, trigger_name, event_manipulation FROM information_schema.triggers where event_object_schema='&amp;p_1' AND event_object_table='&amp;p_2'
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_innodb_table_stats" errorInline="y" comments="Display MySQL Innodb table stats">
        SELECT * FROM information_schema.innodb_table_stats where table_schema='&amp;p_1' AND table_name='&amp;p_2'
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_table_stats" errorInline="y" comments="Display MySQL  table stats">
        SELECT table_catalog,table_schema, table_name, table_type, engine,
            case when table_rows &gt;=1000000 then concat(round(table_rows/1000000,6), 'M') else table_rows end  table_rows,
            concat(round(data_length/1048576),'MB') data, concat(round(index_length/1048576), 'MB') idx,
            concat(round((data_length+index_length)/1048576),'MB') total,
            concat(round(data_free/1048576),'MB') free, avg_row_length
            FROM information_schema.tables where table_schema='&amp;p_1' AND table_name='&amp;p_2'
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="meta_innodb_index_stats" errorInline="y" comments="Display MySQL Innodb index stats">
        SELECT * FROM information_schema.innodb_index_stats where table_schema='&amp;p_1' AND table_name='&amp;p_2'
        <param name="database_name" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="innodb_mutex" comments="Display MySQL inndodb mutex">
        show engine innodb mutex
    </sql>
    <sql id="innodb_metrics" comments="Display MySQL inndodb metrics">
        SELECT NAME, COUNT, TIME_ELAPSED FROM information_schema.innodb_metrics order by NAME
        <vsql maxVersion="5.6.0">SELECT "NA" as NAME, 0 as COUNT, 0 as TIME_ELAPSED</vsql>
    </sql>
    <sql id="repl_master" expandRow="y" comments="Display MySQL master status">
        show master status
    </sql>
    <sql id="repl_slave" expandRow="y" comments="Display MySQL slave status">
        show slave status
    </sql>
    <sql id="show_global_status_ps" comments="Display MySQL global status">
        <queryProcessor>MySQLStatusQueryProcessor</queryProcessor>
        <param name="keyword" dataType="non_breakable_string"/>
    </sql>
    <sql id="show_global_status" comments="Display MySQL global status">
        SHOW GLOBAL STATUS
    </sql>
    <sql id="show_global_status_2" comments="Display MySQL global status">
        show global status like '%&amp;p_1%'
        <param name="keyword" dataType="non_breakable_string"/>
    </sql>
    <sql id="global_status" comments="Display MySQL global status">
        SELECT variable_name, variable_value FROM information_schema.global_status
        <vsql minVersion="5.7">SELECT UPPER(variable_name) VARIABLE_NAME, variable_value FROM performance_schema.global_status</vsql>
    </sql>
    <sql id="global_status_metrics2" comments="Display MySQL global status">
        SELECT variable_name, variable_value FROM information_schema.global_status
            where upper(variable_name) like '%&amp;p_1%' AND variable_value!='0' AND variable_value regexp '[0-9\.]' limit 5000
        <vsql minVersion="5.7">SELECT UPPER(variable_name) VARIABLE_NAME, variable_value FROM performance_schema.global_status
            where upper(variable_name) like '%&amp;p_1%' AND variable_value!='0' AND variable_value regexp '[0-9\.]' limit 5000</vsql>
        <param name="keyword" dataType="non_breakable_string"/>
    </sql>
    <sql id="global_status_metrics" comments="Display MySQL global status">
        SELECT variable_name, variable_value FROM information_schema.global_status
            where upper(variable_name) like '%&amp;p_1%'
        <vsql minVersion="5.7">show global status like '%&amp;p_1%'</vsql>
        <param name="keyword" dataType="non_breakable_string"/>
    </sql>
    <sql id="global_variables" comments="Display MySQL global variables">
        SELECT variable_name, variable_value FROM information_schema.global_variables
            where variable_name like '%&amp;p_1%'
        <vsql minVersion="5.7">show global variables like '%&amp;p_1%'</vsql>
        <param name="filter_keyword" dataType="non_breakable_string"/>
    </sql>
    <sql id="all_global_variables"  comments="Retrieve MySQL global variables">
        SELECT variable_name, variable_value FROM information_schema.global_variables
        <vsql minVersion="5.7">SELECT variable_name, variable_value FROM performance_schema.global_variables</vsql>
    </sql>
    <sql id="innodb_trx" comments="Display MySQL innodb transactions">
        SELECT * FROM information_schema.innodb_trx
    </sql>
    <sql id="user_time" comments="Display MySQL user_statistics time info FROM percona db">
        SELECT user, total_connections, connected_time , busy_time, cpu_time FROM information_schema.user_statistics order by user
    </sql>
    <sql id="innodb_locks" comments="Display MySQL innodb locks">
        SELECT * FROM information_schema.innodb_locks
    </sql>
    <sql id="meta_pk_check" comments="Check MySQL tables without PK">
        SELECT table_schema, table_name
            FROM information_schema.columns
            where table_schema!='performance_schema' AND table_schema!='information_schema' AND table_schema!='mysql'
            GROUP BY table_schema, table_name
            having sum(IF(column_key in ('PRI', 'UNI'), 1, 0))=0
    </sql>
    <sql id="meta_schema_pk_check" comments="Check MySQL tables without PK for a given schema">
        SELECT table_schema, table_name
            FROM information_schema.columns
            where table_schema='&amp;p_1'
            GROUP BY table_schema, table_name
            HAVING sum(if(column_key in ('PRI', 'UNI'), 1, 0))=0
        <param name="schema_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="innodb_engine_status" comments="Display MySQL innodb status">
        show engine innodb status
    </sql>
    <sql id="user_statistics" errorInline="y" comments="Display MySQL user_statistics FROM percona db/mariadb">
        SELECT * FROM information_schema.user_statistics
    </sql>
    <sql id="client_statistics"  errorInline="y" comments="Display MySQL client_statistics FROM percona db/mariadb">
        SELECT * FROM information_schema.client_statistics
    </sql>
    <sql id="client_conn_statistics"  errorInline="y" comments="Display MySQL connection related client_statistics FROM percona db/mariadb">
        SELECT client, total_connections,  denied_connections, lost_connections, connected_time  FROM information_schema.client_statistics order by client
    </sql>
    <sql id="table_statistics"  errorInline="y" comments="Display MySQL table_statistics FROM percona db/mariadb">
        SELECT concat(table_schema,'.',table_name) TABLE_NAME, rows_read, rows_changed, rows_changed_x_indexes FROM information_schema.table_statistics order by 1
    </sql>
    <sql id="index_statistics2"  errorInline="y" comments="Display MySQL index_statistics FROM percona db/mariadb">
        SELECT concat(table_schema,'.',table_name,'.', index_name) INDEX_NAME, rows_read FROM information_schema.index_statistics order by 1
    </sql>
    <sql id="index_statistics"  errorInline="y" comments="Display MySQL index_statistics by table FROM percona db/mariadb">
        SELECT concat(table_schema,'.',table_name,'.', index_name) INDEX_NAME, rows_read
            FROM information_schema.index_statistics where table_schema like '&amp;p_1' AND table_name like '&amp;p_2' order by 1
        <param name="table_schema" dataType="non_breakable_string"/>
        <param name="table_name" dataType="non_breakable_string"/>
    </sql>
    <sql id="perf_setup_timers" comments="Display MySQL PS setup_timers">
        SELECT * FROM performance_schema.setup_timers
    </sql>
    <sql id="perf_setup_instruments" comments="Display MySQL PS setup_instruments">
        SELECT * FROM performance_schema.setup_instruments
    </sql>
    <sql id="perf_setup_consumers" comments="Display MySQL PS setup_consumers">
        SELECT * FROM performance_schema.setup_consumers
    </sql>
    <sql id="perf_setup_threads" comments="Display MySQL PS threads">
        SELECT * FROM performance_schema.threads
    </sql>
    <sql id="perf_setup_actors" comments="Display MySQL PS setup_actors">
        SELECT * FROM performance_schema.setup_actors
    </sql>
    <sql id="perf_setup_objects" comments="Display MySQL PS setup_objects">
        SELECT * FROM performance_schema.setup_objects
    </sql>
    <sql id="perf_mutex" comments="Display MySQL mutex by locked threads">
        SELECT * FROM performance_schema.mutex_instances where locked_by_thread_id is not null
    </sql>
    <sql id="perf_rwlock" comments="Display MySQL RWLOCK">
        SELECT * FROM performance_schema.rwlock_instances where write_locked_by_thread_id is not null or read_locked_by_count&gt;0
    </sql>
    <sql id="perf_filesum_inst" comments="Display MySQL file summary by instance">
        SELECT FILE_NAME, EVENT_NAME, OBJECT_INSTANCE_BEGIN,
            COUNT_STAR, SUM_TIMER_WAIT/1000000000 TIMER_WAIT_MS,
            COUNT_READ, SUM_TIMER_READ/1000000000 TIMER_READ_MS, SUM_NUMBER_OF_BYTES_READ BYTES_READ,
            COUNT_WRITE, SUM_TIMER_WRITE/1000000000 TIMER_WRITE_MS, SUM_NUMBER_OF_BYTES_WRITE BYTES_WRITE ,
            COUNT_MISC, SUM_TIMER_MISC/1000000000 TIMER_MISC_MS
        FROM performance_schema.file_summary_by_instance WHERE count_read &gt; 0 OR count_write &gt; 0 OR COUNT_MISC &gt; 0
    </sql>
    <sql id="perf_threads" comments="Display MySQL thread AND processlist">
        SELECT t.thread_id, t.name, t.processlist_id, p.user processlist_user, p.host processlist_host, p.db processlist_db,
            p.command processlist_command, p.time processlist_time, p.state processlist_state, p.info processlist_info
            FROM performance_schema.threads t left join information_schema.processlist p
            on t.processlist_id = p.id
        <vsql minVersion="5.6">SELECT * FROM performance_schema.threads order by type desc limit 5000</vsql>
    </sql>
    <sql id="perf_digests_wait_time" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_timer_wait desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_avg_wait_time" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by avg_timer_wait desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_lock_time" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_lock_time desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_rows_examined" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_rows_examined desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_rows_sent" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_rows_sent desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_tmp_disk_tables" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_created_tmp_disk_tables desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_tmp_tables" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_created_tmp_tables desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_select_full_join" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_select_full_join desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_select_scan" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_select_scan desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_sort_merge_passes" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_sort_merge_passes desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_sort_rows" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_sort_rows desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_no_index" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_no_index_used desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_digests_no_good_index" comments="Display MySQL sql digest summary">
        SELECT * FROM performance_schema.events_statements_summary_by_digest
            where timestampadd(minute,&amp;p_1,last_seen)&gt;=localtimestamp order by sum_no_good_index_used desc limit &amp;p_2
        <param name="minute" dataType="numeric"/>
        <param name="count" dataType="numeric"/>
    </sql>
    <sql id="perf_events_waits_current" comments="Display MySQL current waits">
<!--        SELECT NAME, pps.processlist_id as "ID", pps.thread_id as "THREAD",
            IF(pps.processlist_id=0, 'Internal Thread', CONCAT(ips.user, '@', ips.host)) as USER,
            DB, COMMAND, STATE, TIME, EVENT_NAME LAST_WAIT,
            IF(TIMER_WAIT IS NULL, 'Still Waiting', TIMER_WAIT/1000000000) as LAST_WAIT_MS
        FROM performance_schema.events_waits_current JOIN performance_schema.threads pps USING (thread_id)
        LEFT JOIN information_schema.processlist ips on (pps.processlist_id=ips.id)-->

            SELECT
                pps.processlist_id as "ID",
                pps.thread_id as "THREAD",
                pps.processlist_db as DB,
                pps.processlist_command as COMMAND,
                pps.processlist_state as STATE,
                pps.processlist_time as "TIME",
                ewc.event_name as LAST_WAIT,
                IF(ewc.timer_wait is NULL AND ewc.event_name is NOT NULL, 'Still Waiting', ewc.timer_wait/1000000000) as LAST_WAIT_MS,
                ewc.source,
                CONCAT(ewc.object_schema, '.', ewc.object_name, '.', ewc.index_name) as OBJECT,
                ewc.operation,
                ewc.number_of_bytes as BYTES,
                esc.rows_examined,
                esc.rows_sent,
                esc.rows_affected,
                esc.created_tmp_tables TMP_TABLES,
                esc.created_tmp_disk_tables TMP_DISK_TABLES,
                IF(esc.no_good_index_used >0 OR esc.no_index_used>0, 'YES','NO') as FULL_SCAN,
                IF(esc.timer_wait IS NOT NULL, esc.timer_wait/1000000000, NULL) as LAST_STATEMENT_LATENCY,
                IF(esc.lock_time IS NOT NULL, esc.lock_time/1000000000, NULL) as LOCK_LATENCY,
                IF(pps.name='thread/sql/one_connection', CONCAT(pps.processlist_user, '@', pps.processlist_host),
                REPLACE(pps.name, 'thread/','')) as USER, esc.sql_text SQL_TEXT
            FROM performance_schema.threads AS pps
            LEFT JOIN performance_schema.events_waits_current AS ewc USING(thread_id)
            LEFT JOIN performance_schema.events_statements_current AS esc USING(thread_id)
            ORDER BY pps.processlist_time DESC, LAST_WAIT_MS DESC
    </sql>
    <sql id="perf_events_waits_summary" comments="Display MySQL events waits summary by name">
        SELECT e.event_name, e.count_star, e.sum_timer_wait/1000000000 WAIT_MS FROM performance_schema.events_waits_summary_global_by_event_name e
        WHERE e.count_star &gt; 0 ORDER BY e.event_name LIMIT 5000
    </sql>

    <sql id="perf_thread_stmt_summary" comments="Display MySQL statement summary by name for a given thread">
        SELECT e.event_name, e.count_star, e.sum_timer_wait/1000000000 WAIT_MS, e.sum_lock_time/1000000000 LOCK_MS
            FROM performance_schema.events_statements_summary_by_thread_by_event_name e
            where e.count_star &gt; 0 AND thread_id = &amp; ?
            order by e.event_name
    </sql>

    <sql id="perf_thread_waits_summary" comments="Display MySQL waits summary by name for a given thread">
        SELECT e.event_name, e.count_star, e.sum_timer_wait/1000000000 WAIT_MS
            FROM performance_schema.events_waits_summary_by_thread_by_event_name e
            where e.count_star&gt;0 AND thread_id=&amp;p_1
            order by  e.event_name
        <param name="thread_id" dataType="numeric"/>
    </sql>
    <sql id="perf_thread_stage_summary" comments="Display MySQL waits summary by stage for a given thread">
        SELECT e.event_name, e.count_star, e.sum_timer_wait/1000000000 WAIT_MS
            FROM performance_schema.events_stages_summary_by_thread_by_event_name e
            where e.count_star&gt;0 AND thread_id=&amp;p_1
            order b e.event_name
        <param name="thread_id" dataType="numeric"/>
    </sql>
    <sql id="perf_objects_summary" comments="Display MySQL object access summary by name">
        SELECT CONCAT(object_type, ':', object_schema, '.', object_name) NAME, count_star, sum_timer_wait/1000000000 WAIT_MS,
            min_timer_wait/1000000000 MIN_WAIT_MS, max_timer_wait/1000000000 MAX_WAIT_MS,
            avg_timer_wait/1000000000 AVG_WAIT_MS FROM performance_schema.objects_summary_global_by_type WHERE count_star&gt;0 order by  1 limit 5000
    </sql>


    <sql id="perf_table_io_summary">
        SELECT
            CONCAT(object_type, ':', object_schema, '.', object_name) NAME,
            count_star, sum_timer_wait/1000000000 WAIT_MS, min_timer_wait/1000000000 MIN_WAIT_MS, max_timer_wait/1000000000 MAX_WAIT_MS, avg_timer_wait/1000000000 AVG_WAIT_MS,
            count_read, sum_timer_read/1000000000 READ_MS, min_timer_read/1000000000 MIN_READ_MS, avg_timer_read/1000000000 AVG_READ_MS, max_timer_read/1000000000 MAX_READ_MS,
            count_write, sum_timer_write/1000000000 WRITE_MS, min_timer_write/1000000000 MIN_WRITE_MS, avg_timer_write/1000000000 AVG_WRITE_MS, max_timer_write/1000000000 MAX_WRITE_MS,
            count_fetch, sum_timer_fetch/1000000000 FETCH_MS, min_timer_fetch/1000000000 MIN_FETCH_MS, avg_timer_fetch/1000000000 AVG_FETCH_MS, max_timer_fetch/1000000000 MAX_FETCH_MS,
            count_insert, sum_timer_insert/1000000000 INSERT_MS, min_timer_insert/1000000000 MIN_INSERT_MS, avg_timer_insert/1000000000 AVG_INSERT_MS, max_timer_insert/1000000000 MAX_INSERT_MS,
            count_update, sum_timer_update/1000000000 UPDATE_MS, min_timer_update/1000000000 MIN_UPDATE_MS, avg_timer_update/1000000000 AVG_UPDATE_MS, max_timer_update/1000000000 MAX_UPDATE_MS,
            count_delete, sum_timer_delete/1000000000 DELETE_MS, min_timer_delete/1000000000 MIN_DELETE_MS, avg_timer_delete/1000000000 AVG_DELETE_MS, max_timer_delete/1000000000 MAX_DELETE_MS
        FROM performance_schema.table_io_waits_summary_by_table WHERE count_star &gt; 0 ORDER BY 1 LIMIT 5000
    </sql>

    <sql id="perf_index_io_summary" comments="Display MySQL table lock wait summary by name">
        SELECT CONCAT(object_type, ':', object_schema, '.', object_name,'.', index_name) NAME,
        count_star, sum_timer_wait/1000000000 WAIT_MS, min_timer_wait/1000000000 MIN_WAIT_MS, max_timer_wait/1000000000 MAX_WAIT_MS, avg_timer_wait/1000000000 AVG_WAIT_MS,
        count_read, sum_timer_read/1000000000 READ_MS, min_timer_read/1000000000 MIN_READ_MS, avg_timer_read/1000000000 AVG_READ_MS, max_timer_read/1000000000 MAX_READ_MS,
        count_write, sum_timer_write/1000000000 WRITE_MS, min_timer_write/1000000000 MIN_WRITE_MS, avg_timer_write/1000000000 AVG_WRITE_MS, max_timer_write/1000000000 MAX_WRITE_MS,
        count_fetch, sum_timer_fetch/1000000000 FETCH_MS, min_timer_fetch/1000000000 MIN_FETCH_MS, avg_timer_fetch/1000000000 AVG_FETCH_MS, max_timer_fetch/1000000000 MAX_FETCH_MS,
        count_insert, sum_timer_insert/1000000000 INSERT_MS, min_timer_insert/1000000000 MIN_INSERT_MS, avg_timer_insert/1000000000 AVG_INSERT_MS, max_timer_insert/1000000000 MAX_INSERT_MS,
        count_update, sum_timer_update/1000000000 UPDATE_MS, min_timer_update/1000000000 MIN_UPDATE_MS, avg_timer_update/1000000000 AVG_UPDATE_MS, max_timer_update/1000000000 MAX_UPDATE_MS,
        count_delete, sum_timer_delete/1000000000 DELETE_MS, min_timer_delete/1000000000 MIN_DELETE_MS, avg_timer_delete/1000000000 AVG_DELETE_MS, max_timer_delete/1000000000 MAX_DELETE_MS
        FROM performance_schema.table_io_waits_summary_by_index_usage WHERE index_name IS NOT NULL AND count_star&gt;0 order by  1 limit 5000
    </sql>

    <sql id="perf_table_lock_summary" comments="Display MySQL table lock wait summary by name">
       SELECT CONCAT(object_type, ':', object_schema, '.', object_name) NAME,
            count_star, sum_timer_wait/1000000000 WAIT_MS, min_timer_wait/1000000000 MIN_WAIT_MS, max_timer_wait/1000000000 MAX_WAIT_MS, avg_timer_wait/1000000000 AVG_WAIT_MS,
            count_read, sum_timer_read/1000000000 READ_MS, min_timer_read/1000000000 MIN_READ_MS, avg_timer_read/1000000000 AVG_READ_MS, max_timer_read/1000000000 MAX_READ_MS,
            count_write, sum_timer_write/1000000000 WRITE_MS, min_timer_write/1000000000 MIN_WRITE_MS, avg_timer_write/1000000000 AVG_WRITE_MS, max_timer_write/1000000000 MAX_WRITE_MS,
            count_read_normal, sum_timer_read_normal/1000000000 R_NOMRAL_MS, min_timer_read_normal/1000000000 MIN_R_NORMAL_MS, avg_timer_read_normal/1000000000 AVG_R_NORMAL_MS, max_timer_read_normal/1000000000 MAX_R_NORMAL_MS,
            count_read_with_shared_locks, sum_timer_read_with_shared_locks/1000000000 R_SHARED_LOCKS_MS, min_timer_read_with_shared_locks/1000000000 MIN_R_SHARED_LOCKS_MS, avg_timer_read_with_shared_locks/1000000000 AVG_R_SHARED_LOCKS_MS, max_timer_read_with_shared_locks/1000000000 MAX_R_SHARED_LOCKS_MS,
            count_read_high_priority, sum_timer_read_high_priority/1000000000 R_HIGH_PRIORITY_MS, min_timer_read_high_priority/1000000000 MIN_R_HIGH_PRIORITY_MS, avg_timer_read_high_priority/1000000000 AVG_R_HIGH_PRIORITY_MS, max_timer_read_high_priority/1000000000 MAX_R_HIGH_PRIORITY_MS,
            count_read_no_insert, sum_timer_read_no_insert/1000000000 R_NO_INSERT_MS, min_timer_read_no_insert/1000000000 MIN_R_NO_INSERT_MS, avg_timer_read_no_insert/1000000000 AVG_R_NO_INSERT_MS, max_timer_read_no_insert/1000000000 MAX_R_NO_INSERT_MS,
            count_read_external, sum_timer_read_external/1000000000 R_EXTERNAL_MS, min_timer_read_external/1000000000 MIN_R_EXTERNAL_MS, avg_timer_read_external/1000000000 AVG_R_EXTERNAL_MS, max_timer_read_external/1000000000 MAX_R_EXTERNAL_MS,
            count_write_allow_write, sum_timer_write_allow_write/1000000000 W_ALLOW_W_MS, min_timer_write_allow_write/1000000000 MIN_W_ALLOW_W_MS, avg_timer_write_allow_write/1000000000 AVG_W_ALLOW_W_MS, max_timer_write_allow_write/1000000000 MAX_W_ALLOW_W_MS,
            count_write_concurrent_insert, sum_timer_write_concurrent_insert/1000000000 W_CONC_INSERT_MS, min_timer_write_concurrent_insert/1000000000 MIN_W_CONC_INSERT_MS, avg_timer_write_concurrent_insert/1000000000 AVG_W_CONC_INSERT_MS, max_timer_write_concurrent_insert/1000000000 MAX_W_CONC_INSERT_MS,
            count_write_low_priority, sum_timer_write_low_priority/1000000000 W_LOW_PRIORITY_MS, min_timer_write_low_priority/1000000000 MIN_W_LOW_PRIORITY_MS, avg_timer_write_low_priority/1000000000 AVG_W_LOW_PRIORITY_MS, max_timer_write_low_priority/1000000000 MAX_W_LOW_PRIORITY_MS,
            count_write_normal, sum_timer_write_normal/1000000000 W_NORMAL_MS, min_timer_write_normal/1000000000 MIN_W_NORMAL_MS, avg_timer_write_normal/1000000000 AVG_W_NORMAL_MS, max_timer_write_normal/1000000000 MAX_W_NORMAL_MS,
            count_write_external, sum_timer_write_external/1000000000 W_EXTERNAL_MS, min_timer_write_external/1000000000 MIN_W_EXTERNAL_MS, avg_timer_write_external/1000000000 AVG_W_EXTERNAL_MS, max_timer_write_external/1000000000 MAX_W_EXTERNAL_MS
        FROM performance_schema.table_lock_waits_summary_by_table WHERE count_star&gt;0 ORDER BY 1 LIMIT 5000
    </sql>

<!--  从性能模式（performance_schema）中的events_statements_summary_by_digest表中检索多个列的总计（COUNT_STAR），
等待时间总和（SUM_TIMER_WAIT），锁定时间总和（SUM_LOCK_TIME），错误总数（SUM_ERRORS），
警告总数（SUM_WARNINGS），受影响行数总和（SUM_ROWS_AFFECTED），发送行数总和（SUM_ROWS_SENT），
检查行数总和（SUM_ROWS_EXAMINED），创建临时磁盘表总数（SUM_CREATED_TMP_DISK_TABLES），
创建临时表总数（SUM_CREATED_TMP_TABLES），全连接查询总数（SUM_SELECT_FULL_JOIN），
全范围连接查询总数（SUM_SELECT_FULL_RANGE_JOIN），范围扫描查询总数（SUM_SELECT_RANGE），
范围检查查询总数（SUM_SELECT_RANGE_CHECK），扫描查询总数（SUM_SELECT_SCAN），
排序合并次数总和（SUM_SORT_MERGE_PASSES），范围排序查询总数（SUM_SORT_RANGE），
排序行数总和（SUM_SORT_ROWS），扫描排序查询总数（SUM_SORT_SCAN），
未使用索引查询总数（SUM_NO_INDEX_USED）和未使用良好索引查询总数（SUM_NO_GOOD_INDEX_USED）。  -->
    <sql id="perf_digest_single" comments="Display performance data for a given digest, so that we can track changes">
    SELECT COUNT_STAR, SUM_TIMER_WAIT, SUM_LOCK_TIME, SUM_ERRORS, SUM_WARNINGS, SUM_ROWS_AFFECTED,
        SUM_ROWS_SENT, SUM_ROWS_EXAMINED, SUM_CREATED_TMP_DISK_TABLES, SUM_CREATED_TMP_TABLES,
        SUM_SELECT_FULL_JOIN, SUM_SELECT_FULL_RANGE_JOIN, SUM_SELECT_RANGE, SUM_SELECT_RANGE_CHECK,
        SUM_SELECT_SCAN, SUM_SORT_MERGE_PASSES, SUM_SORT_RANGE, SUM_SORT_ROWS, SUM_SORT_SCAN,
        SUM_NO_INDEX_USED, SUM_NO_GOOD_INDEX_USED
        FROM performance_schema.events_statements_summary_by_digest
        WHERE SCHEMA_NAME = &amp; ? AND DIGEST = &amp;?
    </sql>

<!--   事件名称（event_name），分配次数总数（count_alloc），释放次数总数（count_free），
分配字节数总和（sum_number_of_bytes_alloc），
释放字节数总和（sum_number_of_bytes_free），
最低使用计数（low_count_used），当前使用计数（current_count_used），
最高使用计数（high_count_used），最低使用字节数（low_number_of_bytes_used），
当前使用字节数（current_number_of_bytes_used）和最高使用字节数（high_number_of_bytes_used） -->
    <sql handle="perf_memory_summary_global_by_event_name" comments="Display MySQL global memory allocation by event name">
        SELECT event_name, count_alloc, count_free, sum_number_of_bytes_alloc, sum_number_of_bytes_free,
        low_count_used, current_count_used, high_count_used, low_number_of_bytes_used,current_number_of_bytes_used,
        high_number_of_bytes_used
        FROM performance_schema.memory_summary_global_by_event_name
        WHERE count_alloc &gt; 0
    </sql>

<!--  包括线程ID（thread_id），事件名称（event_name），分配次数总数（count_alloc），
释放次数总数（count_free），分配字节数总和（sum_number_of_bytes_alloc），释放字节数总和（sum_number_of_bytes_free），最低使用计数（low_count_used），当前使用计数（current_count_used），最高使用计数（high_count_used），最低使用字节数（low_number_of_bytes_used），
当前使用字节数（current_number_of_bytes_used）和最高使用字节数（high_number_of_bytes_used）  -->
    <sql id="perf_memory_summary_by_thread_by_event_name" comments="Display MySQL global memory allocation by event name AND thread">
        SELECT thread_id, event_name, count_alloc, count_free, sum_number_of_bytes_alloc, sum_number_of_bytes_free,
        low_count_used, current_count_used, high_count_used, low_number_of_bytes_used, current_number_of_bytes_used,
        high_number_of_bytes_used
        FROM performance_schema.memory_summary_by_thread_by_event_name
        WHERE count_alloc &gt; 0 AND thread_id LIKE '&amp;p_1'

    </sql>

<!--  查询的结果包括进程列表ID（PROCESSLIST_ID），进程列表用户（PROCESSLIST_USER），
进程列表主机（PROCESSLIST_HOST），进程列表命令（PROCESSLIST_COMMAND），
进程列表状态（PROCESSLIST_STATE），进程列表时间（PROCESSLIST_TIME），
元数据锁对象类型（object_type），元数据锁对象模式（object_schema），
元数据锁对象名称（object_name），元数据锁类型（LOCK_TYPE），元数据锁状态（LOCK_STATUS），
元数据锁持续时间（LOCK_DURATION）和进程列表信息（PROCESSLIST_INFO）  -->
    <sql id="metadata_lock" comments="Display MySQL metadata locks">
        SELECT th.PROCESSLIST_ID, th.PROCESSLIST_USER, th.PROCESSLIST_HOST, th.PROCESSLIST_COMMAND,
        th.PROCESSLIST_STATE, th.PROCESSLIST_TIME, ml.object_type, ml.object_schema,
        ml.object_name, ml.LOCK_TYPE,ml.LOCK_STATUS,
        ml.LOCK_DURATION, th.PROCESSLIST_INFO FROM performance_schema.threads th,
        performance_schema.metadata_locks ml WHERE ml.OWNER_THREAD_ID=th.thread_id
    </sql>
</sqls>