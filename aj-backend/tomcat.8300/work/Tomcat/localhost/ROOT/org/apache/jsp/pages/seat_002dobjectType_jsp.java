/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2023-10-30 14:00:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class seat_002dobjectType_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/pages/common.jsp", Long.valueOf(1698491635382L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("<title>admin</title>\r\n");
      out.write("<!--\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://www.ajaxjs.com/public/common.css\" />\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://www.ajaxjs.com/public/admin.css\" />\r\n");
      out.write("    <script src=\"http://www.ajaxjs.com/public/common.js\"></script>\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/common/common.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/common/admin.css\" />\r\n");
      out.write("<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/common/common.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const accessToken = localStorage.getItem(\"accessToken\");\r\n");
      out.write("\r\n");
      out.write("    if(location.href.indexOf('jsp') != -1 && !accessToken) {\r\n");
      out.write("      //  alert('你未登录！');\r\n");
      out.write("       //  location.assign('index.jsp');\r\n");
      out.write("        //location.assign('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 数据字典\r\n");
      out.write("    TASK_TYPE = {\r\n");
      out.write("        \"1\": \"全局侦察任务\",\r\n");
      out.write("        \"2\": \"局部侦察任务\",\r\n");
      out.write("        \"3\": \"建模侦察任务\",\r\n");
      out.write("        \"4\": \"精准打击任务\",\r\n");
      out.write("        \"5\": \"区域瞰制任务\",\r\n");
      out.write("        \"6\": \"前送物资任务\",\r\n");
      out.write("        \"7\": \"后撤伤员任务\",\r\n");
      out.write("        \"8\": \"前进区域侦察任务\",\r\n");
      out.write("        \"9\": \"登陆突击任务\",\r\n");
      out.write("        \"10\": \"扫残破障任务\",\r\n");
      out.write("        \"11\": \"穿插迂回任务\",\r\n");
      out.write("        \"101\": \"任务规划席位\",\r\n");
      out.write("        \"102\": \"前进指挥席位\",\r\n");
      out.write("        \"103\": \"侦察操控席位\",\r\n");
      out.write("        \"104\": \"情报分析席位\",\r\n");
      out.write("        \"105\": \"打击瞰制席位\",\r\n");
      out.write("        \"106\": \"后勤保障席位\",\r\n");
      out.write("        \"107\": \"标绘席位\"\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    OBJECT_GROUP = {\r\n");
      out.write("        \"11\": \"红方 基础标绘\",\r\n");
      out.write("        \"12\": \"红方 态势标绘\",\r\n");
      out.write("        \"13\": \"红方 有人装备\",\r\n");
      out.write("        \"14\": \"红方 无人装备\",\r\n");
      out.write("        \"15\": \"红方 班组\",\r\n");
      out.write("        \"16\": \"红方 障碍物\",\r\n");
      out.write("        \"21\": \"蓝方 基础标绘\",\r\n");
      out.write("        \"22\": \"蓝方 态势标绘\",\r\n");
      out.write("        \"23\": \"蓝方 有人装备\",\r\n");
      out.write("        \"24\": \"蓝方 无人装备\",\r\n");
      out.write("        \"25\": \"蓝方 班组\",\r\n");
      out.write("        \"26\": \"蓝方 障碍物\",\r\n");
      out.write("        \"97\": \"子区域\",\r\n");
      out.write("        \"98\": \"全域多边形\",\r\n");
      out.write("        \"99\": \"其他\",\r\n");
      out.write("        \"100\": \"瞰制区域（圆形）\"\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    OBJECT_TYPE = {\r\n");
      out.write("        \"1\": \"红方指挥所\",\r\n");
      out.write("        \"2\": \"红方阵地\",\r\n");
      out.write("        \"3\": \"红方标绘点\",\r\n");
      out.write("        \"4\": \"红方物资点\",\r\n");
      out.write("        \"5\": \"红方伤员点\",\r\n");
      out.write("        \"6\": \"红方直/折线\",\r\n");
      out.write("        \"7\": \"红方曲线\",\r\n");
      out.write("        \"8\": \"红方圆形\",\r\n");
      out.write("        \"9\": \"红方矩形\",\r\n");
      out.write("        \"10\": \"红方多边形\",\r\n");
      out.write("        \"11\": \"红方正面防御线\",\r\n");
      out.write("        \"12\": \"红方反面防御线\",\r\n");
      out.write("        \"13\": \"红方行军线\",\r\n");
      out.write("        \"14\": \"红方进攻线\",\r\n");
      out.write("        \"17\": \"红方可见光照片\",\r\n");
      out.write("        \"18\": \"红方红外照片\",\r\n");
      out.write("        \"19\": \"红方固定翼巡飞弹\",\r\n");
      out.write("        \"20\": \"红方固定翼侦察机\",\r\n");
      out.write("        \"21\": \"红方固定翼察打一体\",\r\n");
      out.write("        \"22\": \"红方旋翼侦察机\",\r\n");
      out.write("        \"23\": \"红方无人运输直升机\",\r\n");
      out.write("        \"24\": \"红方班组\",\r\n");
      out.write("        \"26\": \"红方穿插点\",\r\n");
      out.write("        \"50\": \"蓝方指挥所\",\r\n");
      out.write("        \"51\": \"蓝方阵地\",\r\n");
      out.write("        \"52\": \"蓝方标绘点\",\r\n");
      out.write("        \"53\": \"蓝方物资点\",\r\n");
      out.write("        \"54\": \"蓝方伤员点\",\r\n");
      out.write("        \"55\": \"蓝方直/折线\",\r\n");
      out.write("        \"56\": \"蓝方曲线\",\r\n");
      out.write("        \"57\": \"蓝方圆形\",\r\n");
      out.write("        \"58\": \"蓝方矩形\",\r\n");
      out.write("        \"59\": \"蓝方多边形\",\r\n");
      out.write("        \"60\": \"蓝方正面防御线\",\r\n");
      out.write("        \"61\": \"蓝方反面防御线\",\r\n");
      out.write("        \"62\": \"蓝方行军线\",\r\n");
      out.write("        \"63\": \"蓝方进攻线\",\r\n");
      out.write("        \"66\": \"蓝方可见光照片\",\r\n");
      out.write("        \"67\": \"蓝方红外照片\",\r\n");
      out.write("        \"68\": \"蓝方固定翼巡飞弹\",\r\n");
      out.write("        \"69\": \"蓝方固定翼侦察机\",\r\n");
      out.write("        \"70\": \"蓝方固定翼察打一体\",\r\n");
      out.write("        \"71\": \"蓝方旋翼侦察机\",\r\n");
      out.write("        \"72\": \"蓝方无人运输直升机\",\r\n");
      out.write("        \"73\": \"蓝方班组\",\r\n");
      out.write("        \"74\": \"漂雷\",\r\n");
      out.write("        \"75\": \"蛇腹型铁丝网\",\r\n");
      out.write("        \"76\": \"一字型铁丝网\",\r\n");
      out.write("        \"77\": \"暗堡\",\r\n");
      out.write("        \"78\": \"地堡\",\r\n");
      out.write("        \"79\": \"机枪掩体\",\r\n");
      out.write("        \"80\": \"红方轨条砦\",\r\n");
      out.write("        \"81\": \"红方三角锥\",\r\n");
      out.write("        \"82\": \"蓝方穿插点\"\r\n");
      out.write("    };\r\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body class=\"inner-page\">\r\n");
      out.write("	<h2>席位与对象类型关系</h2>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"vue\">\r\n");
      out.write("		<div class=\"btns\" align=\"right\">\r\n");
      out.write("			<a href=\"#\" @click=\"isShowCreate = true\"><span style=\"color:green\">➕</span> 添加</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<table class=\"list-table\">\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>id</th><th>任务/席位类型</th><th>对象类型（对应 ObjectType）</th><th>操作</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tr v-for=\"(item) in mapList\">\r\n");
      out.write("				<td>{{item.id}}</td>\r\n");
      out.write("				<td>\r\n");
      out.write("                     {{TASK_TYPE[item.taskTypeId]}}{{'#'+item.taskTypeId}}\r\n");
      out.write("				</td>\r\n");
      out.write("				<td style=\"max-width:1000px;\" width=\"850\">\r\n");
      out.write("				 <!-- {{MAP[item.taskTypeId]}} -->\r\n");
      out.write("                    <ul class=\"item\">\r\n");
      out.write("                        <li v-for=\"(oType) in objectType\">\r\n");
      out.write("                            <label>\r\n");
      out.write("                                <input type=\"checkbox\" v-model=\"MAP[item.taskTypeId]\" :value=\"oType.objectTypeId\" /> {{oType.objTypeName}}{{'#'+oType.objectTypeId}}\r\n");
      out.write("                           </label>\r\n");
      out.write("                        </li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("				</td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<a href=\"#\" @click=\"save(item.taskTypeId)\"><span style=\"color:green\">✔</span> 保存</a>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr :class=\"{hide: !isShowCreate}\">\r\n");
      out.write("				<td></td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <select v-model=\"create.taskTypeId\">\r\n");
      out.write("                        <option v-for=\"(k, v) in TASK_TYPE\" :value=\"v\">\r\n");
      out.write("                            {{k}}-{{v}}\r\n");
      out.write("                        </option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <ul class=\"item\">\r\n");
      out.write("                        <li v-for=\"(oType) in objectType\">\r\n");
      out.write("                            <label>\r\n");
      out.write("                                <input type=\"checkbox\" v-model=\"create.objectTypeIds\" :value=\"oType.objectTypeId\" /> {{oType.objTypeName}}{{'#'+oType.objectTypeId}}\r\n");
      out.write("                           </label>\r\n");
      out.write("                        </li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<a href=\"#\" @click=\"doCreate\">新增</a> | <a href=\"#\" @click=\"isShowCreate = false\">取消</a>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("let MAP = {};\r\n");
      out.write("\r\n");
      out.write("new Vue({\r\n");
      out.write("    el: '#vue',\r\n");
      out.write("    data: {\r\n");
      out.write("        mapList: [],\r\n");
      out.write("        create: {\r\n");
      out.write("            taskTypeId: 0,\r\n");
      out.write("            objectTypeIds: []\r\n");
      out.write("        },\r\n");
      out.write("        isShowCreate: false,\r\n");
      out.write("        editingId: 0,\r\n");
      out.write("        objectType: [{ objectTypeId: 232 }]\r\n");
      out.write("    },\r\n");
      out.write("    mounted() {\r\n");
      out.write("        aj.xhr.get('../admin/common/objectType/list', json => {\r\n");
      out.write("            this.objectType = json.data;\r\n");
      out.write("\r\n");
      out.write("            aj.xhr.get('../admin/task_type_obj_type/list', json => {\r\n");
      out.write("                this.mapList = json.data;\r\n");
      out.write("\r\n");
      out.write("                json.data.forEach(item => {\r\n");
      out.write("                    MAP[item.taskTypeId] = item.objTypeIds.split(\",\").map(Number);\r\n");
      out.write("                });\r\n");
      out.write("            }, {\r\n");
      out.write("                header: {\r\n");
      out.write("                    Authorization: 'Bearer ' + accessToken\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }, {\r\n");
      out.write("            header: {\r\n");
      out.write("                Authorization: 'Bearer ' + accessToken\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    },\r\n");
      out.write("    methods: {\r\n");
      out.write("        doCreate() {\r\n");
      out.write("            let url = '../admin/task_type_obj_type/save?taskTypeId=' + this.create.taskTypeId + '&objTypeIds=' + this.create.objectTypeIds;\r\n");
      out.write("\r\n");
      out.write("            aj.xhr.postForm(url, {}, (json) => {\r\n");
      out.write("                console.log(json);\r\n");
      out.write("                if (json && json.status == 1) {\r\n");
      out.write("                    alert('创建成功');\r\n");
      out.write("                    location.reload();\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            }, {\r\n");
      out.write("                header: {\r\n");
      out.write("                    Authorization: 'Bearer ' + accessToken\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        },\r\n");
      out.write("        del(id) {\r\n");
      out.write("            if (confirm('确定删除？')) {\r\n");
      out.write("                let url = \"../admin/common/taskTypeObjType/delete/\" + id;\r\n");
      out.write("                aj.xhr.postForm(url, {}, (json) => {\r\n");
      out.write("                    if (json && json.status == 1) {\r\n");
      out.write("                        alert('删除成功');\r\n");
      out.write("                        location.reload();\r\n");
      out.write("                    }\r\n");
      out.write("                }, {\r\n");
      out.write("                    header: {\r\n");
      out.write("                        Authorization: 'Bearer ' + accessToken\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        save(taskTypeId) {\r\n");
      out.write("            let url = `../admin/task_type_obj_type/save?taskTypeId=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${taskTypeId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&objTypeIds=` + MAP[taskTypeId];\r\n");
      out.write("\r\n");
      out.write("            aj.xhr.postForm(url, {}, (json) => {\r\n");
      out.write("                console.log(json);\r\n");
      out.write("                if (json && json.status == 1) {\r\n");
      out.write("                    alert('修改成功');\r\n");
      out.write("                    location.reload();\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            }, {\r\n");
      out.write("                header: {\r\n");
      out.write("                    Authorization: 'Bearer ' + accessToken\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
