<script src="js/lib/raphael-min.js"></script>
<style>
.resizeDot {
	width:5px;
	height:5px;
	fill: black;
    stroke: rgb(255, 255, 255);
}
</style>
<div id="RaphaelCanvas"></div>
<script>
A={};
	/**
		改变大小的边框
	 */
	class ResizeControl{
		constructor(PAPER, rectSize, rect){
			this.PAPER = PAPER;
			this.vBox = rectSize; // 虚拟的一个控制框
		}
		
		// 该方法只执行一次
		renderer(){
		 	var allDots = {}; // 保存所有控制点的 map
		 	this.allDots = allDots;
		 	
			var self = this;
			this.dotX = this.dotY = 0;
			
		    function bdragStart() {
		    	self.dotX = this.attr('x'),
		    	self.dotY = this.attr('y');
		    }

		    var PAPER = this.PAPER;
		    allDots['t'] = PAPER.rect().addClass('resizeDot').attr({cursor: 's-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 't'), bdragStart); 		// 上
			allDots['lt'] = PAPER.rect().addClass('resizeDot').attr({cursor: 'nw-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'lt'), bdragStart); 	// 左上
		    allDots['l'] = PAPER.rect().addClass('resizeDot').attr({cursor: 'w-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'l'),bdragStart); 		// 左
		    allDots['lb'] = PAPER.rect().addClass('resizeDot').attr({cursor: 'sw-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'lb'), bdragStart); 	// 左下
		    allDots['b'] = PAPER.rect().addClass('resizeDot').attr({cursor: 's-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'b'), bdragStart); 		// 下
		    allDots['rb'] = PAPER.rect().addClass('resizeDot').attr({cursor: 'se-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'rb'), bdragStart); 	// 右下
		    allDots['r'] = PAPER.rect().addClass('resizeDot').attr({cursor: 'w-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'r'), bdragStart); 		// 右
		    allDots['rt'] = PAPER.rect().addClass('resizeDot').attr({cursor: 'ne-resize'}).drag((dx, dy) => this.dotMove(dx, dy, 'rt'), bdragStart); 	// 右上
			
		 	this.resize();			
		}
		
		enableBorder(isBorder) {
			this.isBorder = isBorder;
		}
		
		// 定位各个点的坐标
		resize(){
			var _bw = 2.5;
			var allDots = this.allDots, vBox = this.vBox;
			
	        allDots['t'].attr({ x: vBox.x + vBox.width / 2 - _bw, y: vBox.y - _bw }); 				// 上
	        allDots['lt'].attr({ x: vBox.x - _bw, y: vBox.y - _bw }); 								// 左上
	        allDots['l'].attr({ x: vBox.x - _bw, y: vBox.y - _bw + vBox.height / 2 }); 				// 左
	        allDots['lb'].attr({ x: vBox.x - _bw, y: vBox.y - _bw + vBox.height }); 				// 左下
	        allDots['b'].attr({ x: vBox.x - _bw + vBox.width / 2, y: vBox.y - _bw + vBox.height }); // 下
	        allDots['rb'].attr({ x: vBox.x - _bw + vBox.width, y: vBox.y - _bw + vBox.height }); 	// 右下
	        allDots['r'].attr({ x: vBox.x - _bw + vBox.width,y: vBox.y - _bw + vBox.height / 2 }); 	// 右
	        allDots['rt'].attr({ x: vBox.x - _bw + vBox.width, y: vBox.y - _bw }); 					// 右上
	        
	        this.updateBorder();
		}
		
		// dy= 移动距离（移动宽度），dy = 移动距离（移动高度）
		dotMove(dx, dy, t) {					
	        var x = this.dotX + dx, y = this.dotY + dy;
	        var vBox = this.vBox;
	        
        	console.log('-----------------')
	       	console.log(this.dotY)
        	console.log(dy)
        	
	        switch (t) {
	        case 't':
	        	console.log(vBox.y)
	        	console.log(y)
	        	console.log(vBox.y - y)
	            vBox.height += vBox.y - y; vBox.y = y;
	            break;
	        case 'lt':
	            vBox.width += vBox.x - x; vBox.height += vBox.y - y;
	            vBox.x = x; vBox.y = y;
	            break;
	        case 'l':
	            vBox.width += vBox.x - x;
	            vBox.x = x;
	            break;
	        case 'lb':
	            vBox.height = y - vBox.y; vBox.width += vBox.x - x;
	            vBox.x = x;
	            break;
	        case 'b':
	            vBox.height = y - vBox.y;
	            break;
	        case 'rb':
	            vBox.height = y - vBox.y; vBox.width = x - vBox.x;
	            break;
	        case 'r':
	            vBox.width = x - vBox.x;
	            break;
	        case 'rt':
	            vBox.width = x - vBox.x; vBox.height += vBox.y - y;
	            vBox.y = y;
	            break;
	        }
	        
	        this.resize();
	    }
		
		// 边框路径的描边
	    updateBorder() {
			if(!this.isBorder)
				return;
			if(!this.border)
				this.border = this.PAPER.path('M0 0L1 1'); // 边框
			
	    	var vBox = this.vBox;
	        var str = 'M' + vBox.x + ' ' + vBox.y + 'L' + vBox.x + ' ' + (vBox.y + vBox.height) + 'L' + (vBox.x + vBox.width) +
				  ' ' + (vBox.y + vBox.height) + 'L' + (vBox.x + vBox.width) + ' ' + vBox.y + 'L' + vBox.x + ' ' + vBox.y;
	        
	    	this.border.attr({path: str});
	    }
	}
	
	ResizeControl.prototype = {
		PAPER: null, 		// SVG 桌布
		vBox: {},			// 虚拟的一个控制框
		isBorder: false,	// 是否显示边框
		allDots: {}			// 保存所有控制点的 map
	};
	
	Raphael.el.addClass = function(className) {
	    this.node.setAttribute("class", className);
	    return this;
	}
	
	var PAPER = Raphael(window.RaphaelCanvas, window.innerWidth, window.innerHeight);// Raphael.js 画布
	var rectSize = {x: 500, y: 200, width: 600, height: 400};
	var rect = PAPER.rect().attr({
		fill:"90-#fff-#F6F7FF",stroke:"#03689A","stroke-width":2
	}).attr(rectSize);
	
	var resize = new ResizeControl(PAPER, rectSize, rect);
	resize.enableBorder(true);
	resize.renderer();
</script>